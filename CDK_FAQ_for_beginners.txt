# CDK CI/CDパイプライン よくある質問（FAQ）

## 目次
1. プロジェクト全体について
2. ファイル構成について
3. 環境分離について
4. AWSアカウントについて
5. 実装上の注意点（Q10-Q16、Q25-Q32）
6. Python仮想環境について（Q17-Q19）
7. デプロイ後の確認方法（Q20-Q24）

---

## 1. プロジェクト全体について

### Q1: このCDKプロジェクトは何をするものですか？
A: AWS CDKを使ったCI/CDパイプラインの学習用サンプルプロジェクトです。
   主な機能：
   - GitHubにコードをpushすると自動でパイプラインが実行される
   - Dev環境とTest環境に同じコードが順次デプロイされる
   - S3バケットが各環境に自動作成される
   - Infrastructure as Code（コードによるインフラ管理）の実践

### Q2: CDKとは何ですか？
A: AWS Cloud Development Kit の略で、プログラミング言語（Python、TypeScript等）を使って
   AWSリソースを定義・管理できるツールです。
   従来のCloudFormationテンプレート（JSON/YAML）の代わりに、
   慣れ親しんだプログラミング言語でインフラを記述できます。

---

## 2. ファイル構成について

### Q3: app.pyとは何ですか？
A: CDKアプリケーションのメイン関数（エントリーポイント）です。
   Javaのmain()メソッドのような役割で、CDKアプリケーション全体の起点となります。
   `cdk deploy`や`cdk synth`を実行すると、このファイルが最初に実行されます。

### Q4: pipeline_stack.pyとは何ですか？CDKとの関係は？
A: CI/CDパイプライン自体をCDKコードで定義するファイルです。
   役割：
   - CodePipelineを作成してGitHub連携を設定
   - ソースコード取得 → CDK Synth → デプロイの自動化フローを構築
   - Dev環境 → Test環境への順次デプロイを制御
   
   CDKとの関係：
   - CDKのStackクラスを継承してパイプライン用のStackを作成
   - 「CDKアプリをデプロイするためのパイプラインを、CDK自体で作る」というメタ的な構造

### Q5: my_app_stage.pyとは何ですか？
A: 実際にデプロイするアプリケーション（AWSリソース）を定義するファイルです。
   構成：
   - MyAppStack: 実際のAWSリソース（S3バケット等）を定義
   - MyAppStage: 環境単位（Dev、Test等）でStackをまとめる
   
   CDKの階層構造：
   App → PipelineStack → MyAppStage → MyAppStack → AWSリソース

---

## 3. 環境分離について

### Q6: なぜDevとTestで環境を分けるのですか？
A: リスク管理と段階的デプロイのためです。
   
   メリット：
   - 開発中の不安定なコードがいきなり本番に影響しない
   - 問題があれば早い段階（Dev環境）で発見できる
   - 各環境で異なる設定やテストが可能
   
   デプロイフロー：
   GitHub Push → Dev環境 → 成功したらTest環境 → （本番環境）

### Q7: Dev/Test環境を同じアカウント・同じリージョンにしたらどうなりますか？
A: リソース名の衝突問題が発生します。
   
   問題例：
   - CloudFormationスタック名が重複 → デプロイエラー
   - S3バケット名が重複 → 作成エラー
   
   解決方法：
   1. 異なるリージョンを使用（推奨）
   2. 異なるAWSアカウントを使用
   3. リソース名に環境名プレフィックスを付ける

---

## 4. AWSアカウントについて

### Q8: AWSアカウントIDとは何ですか？
A: AWS上でアカウントを一意に識別する12桁の数字です。
   例：123456789012
   
   確認方法：
   ```bash
   aws sts get-caller-identity --query Account --output text
   ```
   
   用途：
   - リソースの所有権識別
   - クロスアカウントアクセス制御
   - リソース名の一意性確保

### Q9: 環境ごとにアカウントを分ける意味は？
A: セキュリティと管理の観点から重要です。
   
   パターン別比較：
   
   【同一アカウント・異なるリージョン】（初学者推奨）
   - メリット：設定が簡単、コスト管理が楽
   - デメリット：権限分離が限定的
   
   【異なるアカウント】（本番推奨）
   - メリット：完全な権限分離、セキュリティ向上
   - デメリット：設定が複雑、管理コスト高

---

## 5. 実装上の注意点

### Q10: 初回セットアップで必要な作業は？
A: 以下の手順が必要です：
   
   1. GitHubリポジトリ作成・コードpush
   2. pipeline_stack.pyのリポジトリ名を実際の名前に変更
   3. AWSアカウントIDを実際の値に変更
   4. CodeStar Connectionsでリポジトリ連携設定
   5. CDK Bootstrapの実行
   6. 初回デプロイ実行

### Q11: 学習目的で使う場合の推奨設定は？
A: 以下の設定が最もシンプルです：
   
   ```python
   # 同じアカウント・異なるリージョン
   DEV = Environment(account="あなたのアカウントID", region="ap-northeast-1")   # 東京
   TEST = Environment(account="あなたのアカウントID", region="us-east-1")       # バージニア
   ```
   
   理由：
   - 設定が最も簡単
   - CDKマルチ環境デプロイの概念を学習できる
   - コスト管理が楽

### Q12: エラーが出た場合のよくある原因は？
A: 以下を確認してください：
   
   1. Bootstrap未実行
      エラー：「Need to perform AWS CDK bootstrap」
      解決：`cdk bootstrap`を実行
   
   2. 権限不足
      エラー：「AccessDenied」
      解決：IAMロールの権限を確認
   
   3. Connection ARN未設定
      エラー：「CodeStar connection not found」
      解決：CodeStar Connectionsで接続を作成
   
   4. リソース名重複
      エラー：「Stack already exists」
      解決：環境名をリソース名に含める

### Q13: CDK Bootstrapとは何ですか？なぜ必要ですか？
A: CDK Bootstrapは、CDKを使ってデプロイする前にAWSアカウント/リージョンの環境を準備する必須の初期設定プロセスです。
   
   CDKの動作の仕組み：
   Python CDKコード → cdk synth → CloudFormationテンプレート + アセット → cdk deploy → AWS環境にデプロイ
   
   必要な理由：
   - CDKが生成するアセット（Lambda関数のコード、Dockerイメージ等）の保存場所が必要
   - CloudFormationが安全にデプロイするためのIAMロールが必要
   - CDKのバージョン管理のための仕組みが必要
   
   作成されるリソース：
   1. S3バケット：ファイルアセットを保存
   2. ECRリポジトリ：Dockerイメージを保存
   3. IAMロール：デプロイ、ファイルアップロード等の権限管理（5つのロール）
   4. SSMパラメータ：Bootstrapバージョン管理
   
   実行方法：
   ```bash
   # 基本的な実行
   cdk bootstrap
   
   # 特定のアカウント・リージョンを指定
   cdk bootstrap aws://123456789012/ap-northeast-1
   ```
   
   実行タイミング：
   - アカウント・リージョンの組み合わせごとに初回のみ
   - 複数実行しても問題なし
   - 未実行でcdk deployするとエラーになる

### Q14: Bootstrap済みかどうかはどうやって確認できますか？
A: 以下の方法で確認できます：
   
   ```bash
   # CloudFormationスタック一覧を確認
   aws cloudformation list-stacks --query "StackSummaries[?StackName=='CDKToolkit'].StackStatus" --output table
   
   # S3バケット一覧を確認
   aws s3 ls | grep cdk
   
   # アカウントIDを確認
   aws sts get-caller-identity --query Account --output text
   ```
   
   Bootstrap未実行時のエラー例：
   ```
   Error: SSM parameter /cdk-bootstrap/hnb659fds/version not found. 
   Has the environment been bootstrapped? Please run 'cdk bootstrap'
   ```

### Q15: 基本的な動作確認後、どう発展させれば良いですか？
A: 以下の順序で機能を追加していくことをお勧めします：
   
   1. my_app_stage.pyにLambda関数、DynamoDBテーブルを追加
   2. パイプラインにユニットテスト、統合テストを組み込み
   3. IAMロールの最小権限設定
   4. CloudWatch、X-Rayによる監視追加
   5. 本番環境の追加、承認プロセスの組み込み

### Q16: 実際の業務でCDKを使う場合の注意点は？
A: 以下の点に注意してください：
   
   - セキュリティ：最小権限の原則を適用
   - コスト管理：不要なリソースの自動削除設定
   - 監視：CloudWatchによるログ・メトリクス収集
   - バックアップ：重要なデータの定期バックアップ
   - ドキュメント：コードコメントとREADMEの充実

### Q25: CDKパイプラインを再ビルドしたい時はどうすればいいですか？
A: CDK Pipelinesは「自己更新型」パイプラインのため、通常のローカル `cdk deploy` では**パイプライン管理下のリソースは更新されません**。

   **推奨方法（GitHub経由）**：
   ```bash
   # 1. コードを修正
   # 2. 変更をコミット
   git add .
   git commit -m "fix: エラーを修正"
   
   # 3. GitHubにプッシュ（パイプライン自動実行）
   git push origin main
   ```
   
   **手動実行方法（AWS Console）**：
   1. AWS Console → CodePipeline を開く
   2. パイプライン名（`CdkGhPipeline-Pipeline-xxxxx`）をクリック
   3. **「Release change」**ボタンをクリック
   
   **CLI での手動実行**：
   ```bash
   aws codepipeline start-pipeline-execution --name CdkGhPipeline-Pipeline-xxxxx
   ```

### Q26: エラーを修正してcdk deployしても反映されないのはなぜですか？
A: CDK Pipelinesの設計思想により、**パイプライン管理下のリソースはローカルからデプロイできません**。これは正常な動作です。

   **リソースの管理区分**：
   
   | 更新方法 | 対象リソース | 使用場面 |
   |---------|-------------|----------|
   | **GitHub push** | Dev/Test環境のリソース | ✅ **通常の開発作業** |
   | **Console手動実行** | Dev/Test環境のリソース | 🔧 **緊急時・テスト** |
   | **ローカル `cdk deploy`** | パイプライン本体のみ | ⚠️ **パイプライン設定変更時のみ** |
   
   **現在のプロジェクト構成**：
   ```
   🏭 パイプライン本体 (PipelineStack) ← ローカル cdk deploy で更新可能
   ├── 📋 パイプライン設定
   ├── 🔄 ビルド手順
   └── 🚀 デプロイターゲット
       ├── Dev環境 (MyAppStage)    ← パイプライン管理下（GitHub経由のみ）
       └── Test環境 (MyAppStage)   ← パイプライン管理下（GitHub経由のみ）
   ```
   
   **理由**：
   - GitOpsの原則：**GitHub がすべての変更の唯一の情報源**
   - セキュリティ：本番環境への直接アクセスを防ぐ
   - 管理性：変更履歴とレビュープロセスの一元化

### Q27: どのような場合にローカルでcdk deployが必要ですか？
A: **パイプライン本体の設定を変更する場合のみ**です。

   **ローカル `cdk deploy` が必要な例**：
   - pipeline_stack.py のパイプライン設定変更
   - 新しい環境（Prod環境）の追加
   - パイプラインのビルドコマンド変更
   - GitHub リポジトリ名やブランチ名の変更
   
   **ローカル `cdk deploy` が不要な例**（GitHub経由で更新）：
   - my_app_stage.py のS3バケット設定変更
   - 新しいAWSリソース（Lambda、DynamoDB等）の追加
   - 環境固有の設定値変更
   - アプリケーションロジックの修正
   
   **実際の例**：
   ```python
   # pipeline_stack.py での変更 → ローカル cdk deploy が必要
   pipeline.add_stage(MyAppStage(self, "Prod", "Prod", env=PROD))  # 新環境追加
   
   # my_app_stage.py での変更 → GitHub push で更新
   bucket = s3.Bucket(self, "MyBucket", 
       versioned=True  # バージョニング有効化
   )
   ```
   
   **正しい開発フロー**：
   ```bash
   # アプリケーション修正の場合（通常）
   git add my_app_stage.py
   git commit -m "feat: S3バケットにバージョニング追加"
   git push origin main
   
   # パイプライン設定変更の場合（稀）
   cdk deploy CdkGhPipeline --require-approval never
   git add pipeline_stack.py
   git commit -m "feat: Prod環境を追加"
   git push origin main
   ```

---

## 6. Python仮想環境について

### Q17: Python仮想環境とは何ですか？なぜCDKプロジェクトで必要ですか？
A: Python仮想環境（Virtual Environment）は、プロジェクト固有のPython依存関係を分離して管理する仕組みです。
   
   必要な理由：
   - システム全体のPython環境を汚染しない
   - プロジェクトごとに異なるパッケージバージョンを管理
   - 他の開発者と同じ環境を再現可能
   - パッケージ依存関係の競合を防ぐ
   
   CDKプロジェクトでの設定：
   ```bash
   # 仮想環境作成
   python -m venv .venv
   
   # 有効化（macOS/Linux）
   source .venv/bin/activate
   
   # 有効化（Windows）
   .venv\Scripts\activate
   
   # 依存関係インストール
   (.venv) $ pip install -r requirements.txt
   ```

### Q18: 仮想環境の設定はCDKデプロイに影響しますか？AWSに仮想環境の情報も送信されますか？
A: いいえ、仮想環境の情報はCDKデプロイには全く影響しません。
   
   CDKの動作フロー：
   ```
   【開発環境（ローカル）】
   Python仮想環境 (.venv/) 
       ↓ CDKコード実行
   CloudFormationテンプレート生成
       ↓ AWSへ送信
   【AWS環境】
   AWSリソース作成（S3バケット等）
   ```
   
   仮想環境が影響しない理由：
   - 現在のプロジェクトは単純なS3バケット作成のみ
   - 設定値は固定（バケット名、削除ポリシーなど）
   - 仮想環境は開発ツールとしてのPython環境管理のみ
   
   例外的なケース（このプロジェクトでは該当しない）：
   - Lambdaファンクション：Pythonコードをパッケージングする場合
   - Docker Assets：コンテナイメージをビルドする場合

### Q19: "ModuleNotFoundError: No module named 'aws_cdk'"が出た場合の対処方法は？
A: 仮想環境が有効化されていない、または依存関係がインストールされていないことが原因です。
   
   解決手順：
   ```bash
   # 1. 仮想環境を有効化
   source .venv/bin/activate  # macOS/Linux
   # または
   .venv\Scripts\activate     # Windows
   
   # 2. 仮想環境が有効化されているか確認
   (.venv) $ which python
   # /your/path/my-cdk-app/.venv/bin/python
   
   # 3. 依存関係を再インストール
   (.venv) $ pip install --upgrade pip
   (.venv) $ pip install -r requirements.txt
   
   # 4. CDKが使用可能か確認
   (.venv) $ python -c "import aws_cdk; print('CDK installed successfully')"
   ```

### Q28: git pushしてもパイプラインが自動実行されない場合の原因と対処法は？
A: 最も一般的な原因は**GitHub Webhook エラー**です。以下の順序で確認・対処してください。

   **確認手順**：
   1. **GitHub Webhook 状態確認**:
      - GitHub → リポジトリ → Settings → Webhooks
      - AWS CodePipeline用のWebhookに緑のチェックマークがあるか確認
      - Recent Deliveries でエラー内容を確認
   
   2. **CodeStar Connections 状態確認**:
      - AWS Console → Developer Tools → Settings → Connections
      - Status が「Available」になっているか確認
   
   3. **パイプライン存在確認**:
      - AWS Console → CodePipeline (リージョン: ap-northeast-1)
      - `CdkGhPipeline-Pipeline-xxxxx` が存在するか確認
   
   **対処法（推奨順）**：
   ```bash
   # 1. パイプライン完全再作成（最も確実）
   source .venv/bin/activate
   cdk destroy CdkGhPipeline
   cdk deploy CdkGhPipeline --require-approval never
   
   # 2. テスト用コミットで動作確認
   echo "Webhook test - $(date)" >> webhook_test.txt
   git add webhook_test.txt
   git commit -m "test: Webhook修復後の動作確認"
   git push origin main
   ```

### Q29: DevStageでPrepareとDeployの2段階に分かれているのはなぜですか？
A: CDK Pipelinesが**CloudFormationのベストプラクティス**を自動化しているためです。

   **2段階の役割**：
   - **Prepare**: CloudFormation ChangeSet作成・事前検証
   - **Deploy**: ChangeSet実行・実際のリソース作成
   
   **メリット**：
   1. **安全性向上**: Prepare失敗時はDeploy実行されない
   2. **デバッグ容易**: 段階別のエラー特定が可能
   3. **ロールバック制御**: Deploy失敗時の安全な巻き戻し
   
   **実際の動作**：
   ```
   DevStage:
   ├── Prepare: テンプレート生成・検証
   │   └── 失敗 → Deploy実行されない
   └── Deploy: 実際のAWSリソース作成
       └── 失敗 → CloudFormationレベルでロールバック
   ```
   
   **コードでの指定箇所**：
   ```python
   # pipeline_stack.py - この1行で2段階が自動生成される
   pipeline.add_stage(MyAppStage(self, "Dev", "Dev", env=DEV))
   ```

### Q30: パイプラインを誤って削除してしまった場合の復旧方法は？
A: **仮想環境の有効化**を忘れずに、CDKで再作成できます。

   **復旧手順**：
   ```bash
   # 1. 仮想環境有効化（重要！）
   source .venv/bin/activate
   
   # 2. 現在の状況確認
   cdk list
   aws cloudformation list-stacks | grep CdkGhPipeline
   
   # 3. パイプライン再作成
   cdk deploy CdkGhPipeline --require-approval never
   
   # 4. 動作確認
   echo "Pipeline restored - $(date)" >> restore_test.txt
   git add restore_test.txt
   git commit -m "test: パイプライン復旧後の動作確認"
   git push origin main
   ```
   
   **よくある問題**：
   - `ModuleNotFoundError: No module named 'aws_cdk'` → 仮想環境未有効化
   - `ValidationError: Artifact Bucket must have a KMS Key` → アカウントID設定ミス
   
   **完全復旧の確認**：
   1. AWS Console → CodePipeline でパイプライン存在確認
   2. GitHub → Settings → Webhooks で新しいWebhook作成確認
   3. git pushでパイプライン自動実行確認

### Q31: CDKでデプロイしたLambda関数（Pythonファイル）をAWS Console上で実行する方法は？
A: Lambda Console から直接実行・テストできます。

   **実行手順**：
   1. **AWS Console** → **Lambda**
   2. 関数一覧から対象関数を選択：
      - `Dev-DevAppStack-MyPythonFunction-xxxxx`
      - `Test-TestAppStack-MyPythonFunction-xxxxx`
   3. **「Test」タブ**をクリック
   4. **「Create new test event」**で新しいテストイベント作成（初回のみ）
   5. **「Test」ボタン**をクリック → **即座に実行結果表示**
   
   **実行結果例**：
   ```json
   {
     "statusCode": 200,
     "body": {
       "message": "Python function executed successfully in dev!",
       "bucket": "my-cdk-app-dev-123456789012",
       "objects_in_bucket": ["lambda-execution-dev.txt"],
       "execution_id": "12345678-1234-1234-1234-123456789012"
     }
   }
   ```
   
   **Lambda関数の機能**：
   - ✅ S3バケットにファイル作成
   - ✅ バケット内オブジェクト一覧取得
   - ✅ 環境変数の取得・利用
   - ✅ 実行ログの出力
   
   **ログ確認**：
   - **CloudWatch Logs** で詳細な実行ログを確認可能
   - エラー時のデバッグ情報も表示

### Q32: 本番環境で大量のLambda関数を管理する場合のベストプラクティスは？
A: 現在の`from_inline`方式ではなく、**外部ファイル化**と**構造化**が必須です。

   **現在の方式（学習用のみ）**：
   ```python
   # ❌ コードが直接埋め込み（非推奨）
   code=lambda_.Code.from_inline("""
   import json  # 70行のコードがCDKファイル内に...
   """)
   ```
   
   **本番推奨方式**：
   ```
   プロジェクト構造:
   my-cdk-app/
   ├── lambda/                    # Lambda関数のコード
   │   ├── user-api/             # 機能別ディレクトリ
   │   │   ├── handler.py        # メイン関数
   │   │   ├── requirements.txt  # 依存関係
   │   │   └── tests/           # ユニットテスト
   │   ├── order-processor/      # 注文処理関数
   │   └── common/              # 共通ライブラリ
   │       ├── s3_utils.py      # S3操作共通関数
   │       └── response_utils.py # レスポンス共通関数
   ├── cdk/
   │   ├── constructs/          # 再利用可能コンストラクト
   │   └── stacks/             # 機能別スタック
   ```
   
   **CDK側の実装**：
   ```python
   # ✅ 外部ファイルから読み込み
   lambda_.Function(
       self,
       "UserApiFunction",
       code=lambda_.Code.from_asset("lambda/user-api"),
       handler="handler.handler"
   )
   ```
   
   **メリット**：
   - ✅ コードの再利用性向上
   - ✅ ユニットテスト実装容易
   - ✅ チーム開発対応
   - ✅ CI/CD パイプライン統合
   - ✅ デバッグ・保守性向上

---

## 7. デプロイ後の確認方法

### Q20: CDKデプロイが成功したかどうかはどう確認しますか？
A: コマンドライン出力とAWS Consoleの両方で確認できます。
   
   成功時のコマンドライン出力：
   ```bash
   (.venv) $ cdk deploy CdkGhPipeline --require-approval never
   
   ✅  CdkGhPipeline
   
   ✨  Deployment time: 156.78s
   
   Outputs:
   CdkGhPipeline.PipelineName = CdkGhPipeline-Pipeline-AbCdEfGhIjKl
   Stack ARN:
   arn:aws:cloudformation:ap-northeast-1:123456789012:stack/CdkGhPipeline/12345678-abcd-1234-abcd-123456789012
   
   ✨  Total time: 162.45s
   ```
   
   成功のサイン：
   - `✅ CdkGhPipeline` の表示
   - `Outputs:` でPipeline名が表示される
   - エラーメッセージが出ていない
   - 所要時間は通常5-10分程度

### Q21: AWS Consoleでの確認すべきポイントは？
A: 以下の3つのサービスを順次確認してください：
   
   1. **CodePipeline**：
      - パイプライン一覧で `CdkGhPipeline-Pipeline-xxxxx` を確認
      - Status が `Succeeded` または各ステージの進行状況を確認
      - 失敗時は Details → View in CodeBuild でログ確認
   
   2. **CloudFormation**：
      ```
      ├── CdkGhPipeline                    # パイプライン本体
      ├── MyApp-Dev-DevAppStack            # Dev環境のアプリスタック
      └── MyApp-Test-TestAppStack          # Test環境のアプリスタック
      ```
      - 各スタックのStatusが `CREATE_COMPLETE` または `UPDATE_COMPLETE`
   
   3. **S3**：
      ```
      my-cdk-app-dev-123456789012     # Dev環境用バケット
      my-cdk-app-test-123456789012    # Test環境用バケット
      ```
      - バケット名に環境名とアカウントIDが含まれることを確認

### Q22: AWS CLIでの確認方法は？
A: 以下のコマンドで詳細を確認できます：
   
   ```bash
   # 現在のAWSアカウントID確認
   aws sts get-caller-identity --query Account --output text
   
   # CloudFormationスタック一覧
   aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query 'StackSummaries[?contains(StackName, `CdkGhPipeline`) || contains(StackName, `MyApp`)].{Name:StackName,Status:StackStatus}' --output table
   
   # S3バケット一覧（my-cdk-appで始まるもの）
   aws s3 ls | grep my-cdk-app
   
   # 特定バケットの詳細確認
   aws s3api get-bucket-location --bucket my-cdk-app-dev-123456789012
   aws s3api get-bucket-versioning --bucket my-cdk-app-dev-123456789012
   ```

### Q23: 実際に作成されたS3バケットが動作しているかテストする方法は？
A: 以下の手順でファイルのアップロード・ダウンロードテストができます：
   
   ```bash
   # 1. テストファイル作成・アップロード
   echo "Hello CDK!" > test.txt
   aws s3 cp test.txt s3://my-cdk-app-dev-123456789012/
   
   # 2. ファイルが正常にアップロードされたか確認
   aws s3 ls s3://my-cdk-app-dev-123456789012/
   
   # 3. ファイルダウンロード（確認）
   aws s3 cp s3://my-cdk-app-dev-123456789012/test.txt downloaded-test.txt
   cat downloaded-test.txt
   # "Hello CDK!" が表示されれば成功
   
   # 4. テストファイル削除（クリーンアップ）
   rm test.txt downloaded-test.txt
   aws s3 rm s3://my-cdk-app-dev-123456789012/test.txt
   ```
   
   期待される結果：
   - ファイルアップロード成功
   - ファイル一覧に test.txt が表示される
   - ダウンロードしたファイルの内容が一致する

### Q24: 継続的な運用で確認すべき項目は？
A: 以下の項目を定期的に確認することをお勧めします：
   
   **定期確認項目**：
   - **CodePipeline**: 新しいコミット後の自動実行状況
   - **CloudWatch**: リソースの使用状況とエラーログ
   - **AWS Config**: コンプライアンス状況（本番環境の場合）
   
   **コスト監視**：
   ```bash
   # 現在の月間推定コスト確認
   aws ce get-dimension-values --dimension SERVICE --time-period Start=2024-01-01,End=2024-01-31
   ```
   
   **セキュリティ確認**：
   - IAMロールの最小権限設定
   - S3バケットのパブリックアクセス設定
   - CloudTrailによるAPI呼び出し監査

---

対象：CDK初心者
目的：よくある質問への回答集 